// vec自身有很多方法，另外vec还可以调用所有Slice类型的方法

fn main() {
    let v = vec![11, 22, 33];
    assert_eq!(v.len(), 3);
    assert!(!v.is_empty());
    // ----------------------------------------------------------------

    let mut v = vec![11, 22];
    v.push(33); // [11,22,33]
    assert_eq!(v.pop(), Some(33));
    assert_eq!(v.pop(), Some(22));
    assert_eq!(v.pop(), Some(11));
    assert_eq!(v.pop(), None);

    v.insert(0, 111); // [111]
    v.insert(1, 222); // [111,222]
    v.insert(2, 333); // [111,222,333]
    assert_eq!(v.remove(1), 222);

    v.clear(); // []

    // ----------------------------------------------------------------
    let mut v = vec![11, 22];
    let mut vv = [33, 44, 55].to_vec();

    v.append(&mut vv);
    println!("{:?}", v); // [11,22,33,44,55]
    println!("{:?}", vv); // []

    // ----------------------------------------------------------------
    // truncate()：截断到指定长度，多余的元素被删除，如果目标长度大于当前长度，则不做任何事
    let mut v = vec![11, 22, 33, 44];
    v.truncate(2);
    println!("{:?}", v); // [11, 22]
    v.truncate(5); // 不做任何事

    // ----------------------------------------------------------------
    // retain()：保留满足条件的元素，即删除不满足条件的元素
    let mut v = vec![11, 22, 33, 44];

    v.retain(|x| *x > 20);
    println!("{:?}", v); // [22,33,44]

    // ----------------------------------------------------------------
    // drain()：删除指定范围的元素，同时返回该范围所有元素的迭代器。如果删除迭代器，则丢弃迭代器中剩余的元素
    let mut v = vec![11, 22, 33, 44, 55];
    let mut vv = v.clone();

    // 删除中间3个元素，同时获取到这些元素的迭代器
    // 直接丢弃迭代器，所以迭代器中的元素也直接被丢弃
    // 这相当于直接删除指定范围的元素
    v.drain(1..=3);
    println!("{:?}", v); // [11, 55]

    // 将迭代器中的元素转换为Vec<i32>
    let a: Vec<i32> = vv.drain(1..=3).collect();
    println!("{:?}", a); // [22, 33, 44]
    println!("{:?}", vv); // [11, 55]

    // ----------------------------------------------------------------
    // split_off()：将vec从指定索引处切分成两个vec，
    // 索引左边(不包括索引位置处)的元素保留在原vec中，索引右边(包括索引位置处)的元素在返回的vec中
    let mut v = vec![11, 22, 33, 44, 55];
    let vv = v.split_off(2);
    println!("{:?}", v); // [11, 22]
    println!("{:?}", vv); // [33, 44, 55]
}

// 流程控制结构包括
// if 条件判断结构
// loop 循环
// while 循环
// for..in 迭代

// Rust中这些结构都是表达式，它们都有默认的返回值(), 且 if 结构和 loop 循环结构可以指定返回值
// 由于if结构是表达式，它有返回值，所以可以将if结构赋值给一个变量(或者其他需要值的地方)
// 但是要注意，if结构默认返回Unit类型的()，这个返回值是没有意义的。如果要指定为其他有意义的返回值，要求：
// (1) 分支最后执行的那一行代码不使用分号结尾，这表示将最后执行的这行代码的返回值作为if结构的返回值
// (2) 每个分支的返回值类型相同，这意味着每个分支最后执行的代码都不能使用分号结尾
// (3) 必须要有else分支，否则会因为所有分支条件判断都不通过而直接返回if的默认返回值()

#![allow(unused)]
fn main() {
    let x = 33;

    // 将if结构赋值给变量a
    // 下面if的每个分支，其返回值类型都是i32类型
    let a = if x < 20 {
        // println!()不是该分支最后一条语句，要加结尾分号
        println!("x < 20");
        // x+10是该分支最后一条语句，
        // 不加分号表示将其计算结果返回，返回类型为i32
        x + 10
    } else if x < 30 {
        println!("x < 30");
        x + 5 // 返回x + 5的计算结果，返回类型为i32
    } else {
        println!("x >= 30");
        x // 直接返回x，返回类型为i32
    }; // if最后一个闭大括号后要加分号，这是let的分号

    // --------------------------------------------------------
    // 将if默认返回值()赋值给变量
    let x = 33;
    // a被赋值为`()`
    let a = if x < 20 {
        println!("x < 20");
    };
    println!("{:?}", a); // ()

    // --------------------------------------------------------
    // 不指定else分支，将报错
    let x = 33;

    // if分支返回i32类型的值
    // 但如果没有执行if分支，则返回默认值`()`
    // 这使得a的类型不是确定的，因此报错
    // let a = if x < 20 {
    //     x + 3 // 该分支返回i32类型
    // };

    // --------------------------------------------------------
    // if分支和else if分支返回不同类型的值，将报错
    // let x = 33;
    // let a = if x < 20 {
    //     x + 3 // i32类型
    // } else if x < 30 {
    //     "hello".to_string() // String类型
    // } else {
    //     x // i32类型
    // };

    // 注意下面使用大括号{}语句块包围了if的COND部分，使得可以先执行其他语句
    // 在语句块的最后才返回bool值作为if的分支判断条件
    let mut x = 0;
    if {
        x += 1;
        x < 3
    } {
        println!("{}", x);
    }
}

[package]
name = "hello"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# 显式声明软件包文件夹内哪些文件被排除在项目的构建流程之外，
# 哪些文件包含在项目的构建流程中
#exclude = ["build/**/*.o", "doc/**/*.html"]
#include = ["src/**/*", "Cargo.toml"]

# 当软件包在向公共仓库发布时出现错误时，使能此字段可以阻止此错误。
#publish = false

# 关于软件包的一个简短介绍。
#description = "..."

# 下面这些字段标明了软件包仓库的更多信息
#documentation = "..."
#homepage = "..."
#repository = "..."

# 顾名思义，此字段指向的文件就是传说中的ReadMe，
# 并且，此文件的内容最终会保存在注册表数据库中。
#readme = "..."

# 用于分类和检索的关键词
#keywords = ["...", "..."]

# 软件包的许可证，必须是cargo仓库已列出的已知的标准许可证。
#license = "..."

# 软件包的非标许可证书对应的文件路径
#license-file = "..."

#修改默认的入口
default-run = "hello"

[dependencies]
# 当 github 仓库下面有多个 Cargo.toml 文件，也就是有多个包时，直接写仓库的根 url 就行
# Cargo 会去这个仓库下面找对应的包，不管包位于根目录下的那个路径
# 参考: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
# regex-lite   = { git = "https://github.com/rust-lang/regex.git" }
# regex-syntax = { git = "https://github.com/rust-lang/regex.git" }

#color = { git = "https://github.com/bjz/color-rs", branch="main" }
# a commit with a particular tag
# regex = { git = "https://github.com/rust-lang/regex.git", tag = "1.10.3" }
# a commit by its SHA1 hash
# regex = { git = "https://github.com/rust-lang/regex.git", rev = "0c0990399270277832fbb5b91a1fa118e6f63dba" }
# HEAD commit of PR 493
# regex = { git = "https://github.com/rust-lang/regex.git", rev = "refs/pull/493/head" }

#依赖本地 lib
#geometry = { path = "crates/geometry" }
rand = { version = "0.8.0" }
ferris-says = "0.2"
time = "0.3.5"
regex = "1.5.4"
async-std = { version = "1.12.0", features = ["attributes"] }
futures = "0.3.28"
clap_builder = "4.3.10"
serde = "1.0.171"
serde_json = "1.0.100"
serde_derive = "1.0.171"
config = "0.13.3"
toml = "0.7.6"
lazy_static = "1.4.0"
anyhow = "1.0.75"
crossbeam = "0.8.2"
thread_local = "1.1.8"

#依赖来自于不同注册服务的同名包
#需要的就是这个 foo package，虽然它被重命名为 bar 或 baz
#foo = "0.1"
#bar = { git = "https://github.com/example/project", package = "foo" }
#baz = { version = "0.1", registry = "custom", package = "foo" }

[dev-dependencies]
criterion = "0.5"

#还可以指定平台特定的测试依赖包
[target.'cfg(unix)'.dev-dependencies]
mio = "0.8.11"

#还可以指定某些依赖仅用于构建脚本
[build-dependencies]
cc = "1.0.3"
#平台特定的依然可以使用
#[target.'cfg(unix)'.build-dependencies]
#cc = "1.0.3"

#有一点需要注意：构建脚本( build.rs )和项目的正常代码是彼此独立，因此它们的依赖不能互通
#构建脚本无法使用 [dependencies] 或 [dev-dependencies] 中的依赖，而 [build-dependencies]
#中的依赖也无法被构建脚本之外的代码所使用。

#在 Cargo.toml 中重命名依赖
#如果你想要实现以下目标：
#避免在 Rust 代码中使用 use foo as bar
#依赖某个包的多个版本
#依赖来自于不同注册服务的同名包
#那可以使用 Cargo 提供的 package key
#[dependencies]
#foo = "0.1"
#bar = { git = "https://github.com/example/project", package = "foo" }
#baz = { version = "0.1", registry = "custom", package = "foo" }

[[bench]]
name = "my_benchmark"
harness = false

#如果没有在Cargo.toml里定义集成测试的入口，那么tests目录(不包括子目录)下的每个rs文件被当作集成测试入口.
#如果在Cargo.toml里定义了集成测试入口，那么定义的那些rs就是入口，不再默认指定任何集成测试入口

[[test]]
name = "test1"
path = "tests/test1.rs"

[[test]]
name = "test2"
path = "tests/test2.rs"

#cargo run --example NAME
[[example]]
name = "ex1"
path = "examples/ex1.rs"

#cargo run —-bin NAME
[[bin]]
name = "bin1"
path = "src/bin/bin1.rs"

#当项目的 Cargo.toml 文件中没有显式增加任何 [profile.*] 部分的时候，Cargo 会对每一个配置都采用默认设置。
#通过增加任何希望定制的配置对应的 [profile.*] 部分，我们可以选择覆盖任意默认设置的子集
#[profile.dev]
#opt-level = 1               # 使用稍高一些的优化级别，最低是0，最高是3
#overflow-checks = false     # 关闭整数溢出检查

#[profile.release]
#opt-level = 3

#我们还可以根据特定的平台来引入依赖
#[target.'cfg(windows)'.dependencies]
#winhttp = "0.4.0"

#[target.'cfg(unix)'.dependencies]
#openssl = "0.10.64"

#[target.'cfg(target_arch = "x86")'.dependencies]
#native = { path = "native/i686" }

#[target.'cfg(target_arch = "x86_64")'.dependencies]
#native = { path = "native/x86_64" }
